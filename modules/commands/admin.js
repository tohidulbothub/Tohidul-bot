const fs = require("fs-extra");
const moment = require("moment-timezone");
const axios = require("axios");
const path = require("path");

module.exports.config = {
  name: "admin",
  version: "1.0.0",
  hasPermssion: 0,
  usePrefix:true,
  credits: "TOHI-BOT-HUB",
  description: "Show Bot Owner Info",
  commandCategory: "info",
  usages: "",
  cooldowns: 5
};

module.exports.run = async function({ api, event }) {
  const { senderID } = event;
  
  // Check if user is admin (optional - remove this check if you want everyone to see admin info)
  // if (!global.config.ADMINBOT.includes(senderID)) {
  //   return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á!", event.threadID, event.messageID);
  // }

  const now = moment().tz("Asia/Dhaka").format("DD/MM/YYYY hh:mm:ss A");
  const imageUrl = "https://i.postimg.cc/nhM2PPjW/admin.png";
  const imagePath = path.join(__dirname, "cache", `admin_${Date.now()}.png`);

  const ownerInfo =
    `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ„Äî üëë ùêÅùêéùêì ùêéùêñùêçùêÑùêë ùêàùêçùêÖùêé üëë „Äï‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n` +
    `‚îÉ\n` +
    `‚îÉ üè∑Ô∏è ùó°ùóÆùó∫ùó≤       : ùôè ùôä ùôÉ ùôÑ ùòø ùôê ùôá „ÉÉ\n` +
    `‚îÉ üë®‚Äçüíº ùóöùó≤ùóªùó±ùó≤ùóø     : ùó†ùóÆùóπùó≤\n` +
    `‚îÉ üíñ ùó•ùó≤ùóπùóÆùòÅùó∂ùóºùóª   : ùó¶ùó∂ùóªùó¥ùóπùó≤\n` +
    `‚îÉ üéÇ ùóîùó¥ùó≤         : 18+\n` +
    `‚îÉ üïå ùó•ùó≤ùóπùó∂ùó¥ùó∂ùóºùóª    : ùóúùòÄùóπùóÆùó∫\n` +
    `‚îÉ üéì ùóòùó±ùòÇùó∞ùóÆùòÅùó∂ùóºùóª  : ùóúùóªùòÅùó≤ùóø 1ùòÄùòÅ ùó¨ùó≤ùóÆùóø\n` +
    `‚îÉ üè† ùóîùó±ùó±ùóøùó≤ùòÄùòÄ    : ùóßùóµùóÆùó∏ùòÇùóøùó¥ùóÆùóºùóª, ùóïùóÆùóªùó¥ùóπùóÆùó±ùó≤ùòÄùóµ\n` +
    `‚îÉ\n` +
    `‚î£‚îÅ‚îÅ‚îÅ„Äî üåê ùó¶ùó¢ùóñùóúùóîùóü ùóüùóúùó°ùóûùó¶ „Äï‚îÅ‚îÅ‚îÅ‚î´\n` +
    `‚îÉ üé≠ TikTok    : -----------\n` +
    `‚îÉ ‚úàÔ∏è Telegram  : https://t.me/NFTTOHIDUL19\n` +
    `‚îÉ üåç Facebook  : https://www.facebook.com/profile.php?id=100092006324917\n` +
    `‚îÉ\n` +
    `‚î£‚îÅ‚îÅ‚îÅ„Äî ‚è∞ ùó®ùó£ùóóùóîùóßùóòùóó ùóßùóúùó†ùóò „Äï‚îÅ‚îÅ‚îÅ‚î´\n` +
    `‚îÉ üïí ${now}\n` +
    `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n` +
    `üíå ùë™ùíìùíÜùíÇùíïùíÜùíÖ ùíÉùíö ùëªùë∂ùëØùë∞ùë´ùëºùë≥ ùë©ùë∂ùëª`;

  try {
    // Download the image from URL
    const response = await axios({
      url: imageUrl,
      method: 'GET',
      responseType: 'stream',
      timeout: 10000
    });

    // Ensure cache directory exists
    const cacheDir = path.dirname(imagePath);
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    // Write image to cache
    const writer = fs.createWriteStream(imagePath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    // Send message with image and auto-cleanup
    return api.sendMessage({
      body: ownerInfo,
      attachment: fs.createReadStream(imagePath)
    }, event.threadID, () => {
      // Auto cleanup after sending
      if (fs.existsSync(imagePath)) {
        try {
          fs.unlinkSync(imagePath);
          console.log(`[ADMIN] Cleaned up cache file: ${imagePath}`);
        } catch (cleanupError) {
          console.log(`[ADMIN] Cache cleanup warning: ${cleanupError.message}`);
        }
      }
    });

  } catch (error) {
    console.error("[ADMIN] Error downloading image:", error.message);
    
    // Always try to send the text message even if image fails
    try {
      return api.sendMessage(ownerInfo + "\n\n[‚õî] ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", event.threadID);
    } catch (sendError) {
      // Silent fail if even text message fails
      console.error("[ADMIN] Failed to send fallback message:", sendError.message);
    }
  }
};
